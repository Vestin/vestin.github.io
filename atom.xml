<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>horizon</title>
  
  <subtitle>Vestin&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://vestin.github.io/"/>
  <updated>2017-10-19T08:44:29.055Z</updated>
  <id>http://vestin.github.io/</id>
  
  <author>
    <name>Vestin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>php hook 机制&amp;原理&amp;实现</title>
    <link href="http://vestin.github.io/2017/04/08/php-hook/"/>
    <id>http://vestin.github.io/2017/04/08/php-hook/</id>
    <published>2017-04-08T02:30:00.000Z</published>
    <updated>2017-10-19T08:44:29.055Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://developers.shopware.com/blog/2015/06/09/understanding-the-shopware-hook-system/" target="_blank" rel="external">Understanding the Shopware hook system</a></li><li><a href="https://craftcms.com/docs/plugins/hooks-and-events" target="_blank" rel="external">Hooks and Events</a></li><li><a href="http://softwareengineering.stackexchange.com/questions/237876/what-should-plugins-use-hooks-events-or-something-else" target="_blank" rel="external">What should plugins use: hooks, events or something else?</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.shopware.com/blog/2015/06/09/understanding-the-shopware-hook-system/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Un
      
    
    </summary>
    
      <category term="coding" scheme="http://vestin.github.io/categories/coding/"/>
    
    
  </entry>
  
  <entry>
    <title>design-pattern-template-pattern</title>
    <link href="http://vestin.github.io/2016/07/04/design-pattern-template-pattern/"/>
    <id>http://vestin.github.io/2016/07/04/design-pattern-template-pattern/</id>
    <published>2016-07-03T16:00:00.000Z</published>
    <updated>2017-10-19T08:44:29.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Template-Pattern"><a href="#Template-Pattern" class="headerlink" title="Template Pattern"></a>Template Pattern</h1><p>定义一个操作中算法的骨架，而将一些步骤延迟到子类中，在不改变算法结果的情况下重新定义它的步骤。<br><a id="more"></a></p><p>与strategy模式的区别:<br>Template Method 模式 适用于存在几个概念上相似，但不相同的过程。每个过程都是互相耦合的，因为他们与某个过程相关。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">Abstract Class Calculate&#123;</div><div class="line"></div><div class="line">public $a;</div><div class="line">public $b;</div><div class="line"></div><div class="line">public function __construct($a,$b)&#123;</div><div class="line">$this-&gt;a = $a;</div><div class="line">$this-&gt;b = $b;</div><div class="line">&#125; </div><div class="line">public function run()&#123;</div><div class="line">$resA = $this-&gt;calculateA($this-&gt;a);</div><div class="line">$resB = $this-&gt;calculateB($this-&gt;b);</div><div class="line">return $resA+$resB;</div><div class="line">&#125;</div><div class="line"></div><div class="line">abstract public function calculateA($a);</div><div class="line">abstract public function calculateB($b);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Class AddCalculate extends Calculate&#123;</div><div class="line">public function calculateA($a)&#123;</div><div class="line">return $a+$a;</div><div class="line">&#125;</div><div class="line">public function calculateB($b)&#123;</div><div class="line">return $b+$b;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Class PlusCaculate extends Calculate&#123;</div><div class="line">public function calculateA($a)&#123;</div><div class="line">return $a*$a;</div><div class="line">&#125;</div><div class="line">public function calculateB($b)&#123;</div><div class="line">return $b*$b;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//test</div><div class="line">echo (new AddCalculate(1,2))-&gt;run();//6</div><div class="line">echo PHP_EOL;</div><div class="line">echo (new PlusCaculate(1,2))-&gt;run();//5</div><div class="line">echo PHP_EOL;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Template-Pattern&quot;&gt;&lt;a href=&quot;#Template-Pattern&quot; class=&quot;headerlink&quot; title=&quot;Template Pattern&quot;&gt;&lt;/a&gt;Template Pattern&lt;/h1&gt;&lt;p&gt;定义一个操作中算法的骨架，而将一些步骤延迟到子类中，在不改变算法结果的情况下重新定义它的步骤。&lt;br&gt;
    
    </summary>
    
      <category term="coding" scheme="http://vestin.github.io/categories/coding/"/>
    
    
      <category term="design pattern" scheme="http://vestin.github.io/tags/design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>design-pattern-commonality-and-variability-analysis</title>
    <link href="http://vestin.github.io/2016/06/17/design-pattern-CVA/"/>
    <id>http://vestin.github.io/2016/06/17/design-pattern-CVA/</id>
    <published>2016-06-17T01:48:53.000Z</published>
    <updated>2017-10-19T08:44:29.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="commonality-and-variability-analysis-CVA-共性可变性分析"><a href="#commonality-and-variability-analysis-CVA-共性可变性分析" class="headerlink" title="commonality and variability analysis (CVA) 共性可变性分析"></a>commonality and variability analysis (CVA) 共性可变性分析</h1><p>共性可变性分析</p><p>设计模式不能用于所有的设计中，但他们提供的思想是相同的。这些思想中，最重要的一条就是可以使用CVA找到系统中的变化，然后按照设计模式的原则（对接口编程、使用对象聚集封装变化）获得灵活和易于测试的设计。<br><a id="more"></a></p><p>造成紧耦合程序设计的原因就是**</p><p>开发人员经常在弄清楚实体本身之前就考虑实体之间的关系**，过早得注意实现细节。</p><blockquote><p>首先，使用CVA找到问题领域中存在的各种概念（共性）和具体的实现（可变性）。这时我们最感兴趣的是找到其中的概念，但是这一过程中也会发现许多可变性。问题域中任何没有包含在这些概念中的实体（比如可能有一些属于“某种”对象的对象）也应该找出来。然后，在所需功能的概念全部找到之后，继续为封装这些概念的抽象定制接口。接着考虑你将如何使用从该抽象派生的具体实现，根据这一点派生接口。</p></blockquote><p><strong>CVA方法和设计模式的区别是： </strong><br>CVA强调尽早关注抽象，这样更可能找到最有用的抽象。设计模式关注这些抽象之间的关系，但是对于找出最重要的抽象帮助不大。设计模式可以使我们利用来自过去成功设计的真知灼见，而CVA做不到这一点。</p><p>分析得到共性和可变性之后，就自然可以形成若干独立的模型（继承结构）。下步任务是确定概念之间的关系。这个过程中，设计模式会对确定概念间关系有指导作用，但不是决定作用。概念间的关系还是要有问题本身来决定，这样才能得到符合真实世界情况的关系模型，在此基础上，设计模式会帮助优化该模式。</p><p>要指出的是，CVA和经典的“名词动词分析法”并不相悖。名词动词分析法中，程序员提取需求描述中的名词和动词，由此来确定系统中的对象及其行为。CVA方法在此基础上更进了一步，在得到具体事物之后要求提取出事物间的共性，也就是概念，以此作为抽象接口的设计蓝图。如果在初始阶段就作如此分析，那么设计过程基本上就满足了“依赖倒置”原则。最终得到的设计也会具有一定的灵活性（但并不能保证这一点，毕竟左右设计结果的因素很多）。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.tuicool.com/articles/mqYF3m" target="_blank" rel="external">设计模式解析笔记 - 共性和可变性分析</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;commonality-and-variability-analysis-CVA-共性可变性分析&quot;&gt;&lt;a href=&quot;#commonality-and-variability-analysis-CVA-共性可变性分析&quot; class=&quot;headerlink&quot; title=&quot;commonality and variability analysis (CVA) 共性可变性分析&quot;&gt;&lt;/a&gt;commonality and variability analysis (CVA) 共性可变性分析&lt;/h1&gt;&lt;p&gt;共性可变性分析&lt;/p&gt;
&lt;p&gt;设计模式不能用于所有的设计中，但他们提供的思想是相同的。这些思想中，最重要的一条就是可以使用CVA找到系统中的变化，然后按照设计模式的原则（对接口编程、使用对象聚集封装变化）获得灵活和易于测试的设计。&lt;br&gt;
    
    </summary>
    
      <category term="coding" scheme="http://vestin.github.io/categories/coding/"/>
    
    
      <category term="design pattern" scheme="http://vestin.github.io/tags/design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>design-pattern-adapter-pattern</title>
    <link href="http://vestin.github.io/2016/06/17/design-pattern-adapter-pattern/"/>
    <id>http://vestin.github.io/2016/06/17/design-pattern-adapter-pattern/</id>
    <published>2016-06-17T01:48:53.000Z</published>
    <updated>2017-10-19T08:44:29.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Adapter-Pattern"><a href="#Adapter-Pattern" class="headerlink" title="Adapter Pattern"></a>Adapter Pattern</h1><p>在软件系统中，由于应用环境的变化，常常需要将“一些现存的对象”放在新的环境中应用，但是新环境要求的接口是这些现存对象所不满足的。Adapter设计模式就是为了应对这种“迁移的变化”，以使客户系统既能利用现有对象的良好实现，同时又能满足新的应用环境所要求的接口。<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">//原运输系统 和 车辆</div><div class="line">Class Transport&#123;</div><div class="line"></div><div class="line">private $car;//运输的车辆</div><div class="line"></div><div class="line">public function __construct(Car $car)&#123;</div><div class="line">$this-&gt;car = $car;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public function transporting()&#123;</div><div class="line">$this-&gt;car-&gt;run();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//车</div><div class="line">interface Car&#123;</div><div class="line">//搞运输</div><div class="line">public function run();</div><div class="line">&#125;</div><div class="line"></div><div class="line">//正常运输车</div><div class="line">Class Jeep implements Car&#123;</div><div class="line">public function run()&#123;</div><div class="line">echo &apos;run...&apos;;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//正常情况是这样的</div><div class="line">$jeep = new Jeep;</div><div class="line">$transport = new Transport($jeep);</div><div class="line">$transport-&gt;transporting();//&apos;run...&apos;;</div><div class="line"></div><div class="line">//但有一种车辆，他是这样的</div><div class="line">Class BMW &#123;</div><div class="line">public function move()&#123;</div><div class="line">echo &apos;move...&apos;;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//BMW 如果想加入运输系统，就需要adapter 模式</div><div class="line">Class BMWCaradapter implements Car&#123;</div><div class="line"></div><div class="line">private $bmw;</div><div class="line"></div><div class="line">public function __construct($bmw)&#123;</div><div class="line">$this-&gt;bmw = $bmw;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public function run()&#123;</div><div class="line">$bmw-&gt;move();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//运行</div><div class="line">$bmw = new BMW;</div><div class="line">$BMWCarAdapter = new BMWCarAdapter($bmw);</div><div class="line">$transport = new Transport($BMWCarAdapter);</div><div class="line">$transport-&gt;transporting();//&apos;move...&apos;;</div><div class="line"></div><div class="line">//这样就完成了适配</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Adapter-Pattern&quot;&gt;&lt;a href=&quot;#Adapter-Pattern&quot; class=&quot;headerlink&quot; title=&quot;Adapter Pattern&quot;&gt;&lt;/a&gt;Adapter Pattern&lt;/h1&gt;&lt;p&gt;在软件系统中，由于应用环境的变化，常常需要将“一些现存的对象”放在新的环境中应用，但是新环境要求的接口是这些现存对象所不满足的。Adapter设计模式就是为了应对这种“迁移的变化”，以使客户系统既能利用现有对象的良好实现，同时又能满足新的应用环境所要求的接口。&lt;br&gt;
    
    </summary>
    
      <category term="coding" scheme="http://vestin.github.io/categories/coding/"/>
    
    
      <category term="design pattern" scheme="http://vestin.github.io/tags/design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>产品的方法论</title>
    <link href="http://vestin.github.io/2016/05/07/%E4%BA%A7%E5%93%81%E7%9A%84%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    <id>http://vestin.github.io/2016/05/07/产品的方法论/</id>
    <published>2016-05-07T06:34:35.000Z</published>
    <updated>2017-10-19T08:44:29.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="产品的方法论"><a href="#产品的方法论" class="headerlink" title="产品的方法论"></a>产品的方法论</h1><p>发现问题-&gt;分析问题-&gt;解决问题-&gt;验证问题 –&gt;(继续重发发现问题-&gt;…)</p><a id="more"></a><h3 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h3><h4 id="用户"><a href="#用户" class="headerlink" title="用户"></a><strong>用户</strong></h4><p>自己不是典型用户时，挖掘用户需求时，不要从自己的想法出发。空想没用，最好要自己尝试使用。</p><p>没有好用的办法挖掘时，<strong>用户反馈</strong>是非常重要的渠道。</p><p>经常去了解用户</p><h4 id="数据"><a href="#数据" class="headerlink" title="数据"></a><strong>数据</strong></h4><p>注意的点：<br>听用户的反馈，要非常具体的去了解用户的反馈，而不是非常宽泛的感受，如<em>‘体验不好’</em>,<em>‘效果不好’</em>等。</p><p>如果遇到用户反馈说感受不好等宽泛感受时，问<strong>问什么</strong>。具体去挖掘。</p><p>挖掘到问题，要具体思考，不要做传话筒。</p><p>从数据看用户画像。</p><p>其他：竞品</p><h3 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h3><p>用户的问题都是问题，可以拖延处理（排优先级等)，但不能否认问题。</p><p>排优先级：</p><ul><li>影响用户的规模，覆盖用户面广</li><li>通过数据。（没数据怎么办？）太多也不好，大家能达成共识就好。</li></ul><p>讨论时不用主观的看法，用客观的数据说话。大家讨论时不用形容词，比如 <em>事情很严重</em>， <em>影响用户量很大</em> 等等</p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>解决方案的提出，解决方法至少要提出3套。</p><p>解决了问题之后，最重要的是学习到经验。对用户的了解更多。使得自己对用户的了解更多，设计出的产品更好。</p><p>找到问题的关键点。</p><h3 id="验证问题"><a href="#验证问题" class="headerlink" title="验证问题"></a>验证问题</h3><p>产品上线不是结束，要明白解决问题的标准是什么？</p><ul><li>数据说话</li><li>用户反馈<br>所以看结果时要设定目标</li></ul><p>DataReview</p><ul><li>产品上线有没有对副作用</li><li>有没有效果</li></ul><p>设定目标，设定预期（预期没法判断？ 你要努力让自己的预期变准确，你自己要努力让你自己的产品达到预期。多尝试几次，预期会变准确）</p>]]></content>
    
    <summary type="html">
    
      York 梁溢
    
    </summary>
    
    
      <category term="产品" scheme="http://vestin.github.io/tags/%E4%BA%A7%E5%93%81/"/>
    
  </entry>
  
  <entry>
    <title>livereload</title>
    <link href="http://vestin.github.io/2016/05/06/livereload/"/>
    <id>http://vestin.github.io/2016/05/06/livereload/</id>
    <published>2016-05-06T06:24:57.000Z</published>
    <updated>2017-10-19T08:44:29.055Z</updated>
    
    <content type="html"><![CDATA[<p>nodejs + chrome extension</p><ol><li><p>install <a href="https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei" target="_blank" rel="external">chrome extension - livereload</a></p></li><li><p><code>sudo npm i livereload -g</code> 全局安装node插件livereload, <a href="https://npm.taobao.org/package/livereload" target="_blank" rel="external">livereload插件详情</a></p></li><li><p>在正在修改的html文件中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  document.write(&apos;&lt;script src=&quot;http://&apos; + (location.host || &apos;localhost&apos;).split(&apos;:&apos;)[0] +</div><div class="line">  &apos;:35729/livereload.js?snipver=1&quot;&gt;&lt;/&apos; + &apos;script&gt;&apos;)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></li><li><p>在要修改的文件目录下, 输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vestin@vestin:~/test$ livereload</div><div class="line">Starting LiveReload v0.4.1 for ~/test/mail.html on port 35729.</div></pre></td></tr></table></figure></li><li><p>直接打开html文件，file:///协议就ok</p></li><li><p>编辑文件，查看结果</p></li></ol>]]></content>
    
    <summary type="html">
    
      livereload 前端页面保存自动刷新
    
    </summary>
    
    
      <category term="tools" scheme="http://vestin.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>sass 2 css gulp workflow,minify html,minify css</title>
    <link href="http://vestin.github.io/2016/05/04/sass-node-gulp/"/>
    <id>http://vestin.github.io/2016/05/04/sass-node-gulp/</id>
    <published>2016-05-04T11:34:59.000Z</published>
    <updated>2017-10-19T08:44:29.055Z</updated>
    
    <content type="html"><![CDATA[<p>目前sass提供了观察文件变化，自动将sass文件编译成css的功能。如：<br>You can also tell Sass to watch the file and update the CSS every time the Sass file changes:<br><code>sass --watch input.scss:output.css</code><br>If you have a directory with many Sass files, you can also tell Sass to watch the entire directory:<br><code>sass --watch app/sass:public/stylesheets</code><br>在有些机子上跟踪编译非常慢。使用不便。<br>如果想更顺手的完成更复杂的编译，就需要使用nodejs,gulp 工具进行处理。</p><p>[TOC]</p><p>用到的Gulp插件</p><ul><li><a href="https;//www.npmjs.com/package/gulp-sass">gulp-sass</a></li><li><a href="https://www.npmjs.com/package/gulp-clean-css/" target="_blank" rel="external">gulp-clean-css</a></li><li><a href="https://www.npmjs.com/package/gulp-htmlmin/" target="_blank" rel="external">gulp-htmlmin</a></li></ul><h3 id="Sass安装"><a href="#Sass安装" class="headerlink" title="Sass安装"></a>Sass安装</h3><p>环境ubuntu 16.04</p><ol><li><code>sudo apt-get install ruby</code></li><li><code>sudo gem install sass</code><a id="more"></a>国内会报错，如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo gem install sass</div><div class="line">ERROR:  While executing gem ... (Gem::RemoteFetcher::FetchError)</div><div class="line">Errno::ECONNRESET: Connection reset by peer - SSL_connect (https://api.rubygems.org/quick/Marshal.4.8/sass-3.4.22.gemspec.rz)</div></pre></td></tr></table></figure></li></ol><p>原因是国内和谐gem，解决方法是使用<a href="https://ruby.taobao.org/" target="_blank" rel="external">淘宝镜像</a>如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/</div><div class="line">$ gem sources -l</div><div class="line">*** CURRENT SOURCES ***</div><div class="line">https://ruby.taobao.org</div><div class="line"># 请确保只有 ruby.taobao.org</div></pre></td></tr></table></figure></p><p>重新执行<code>sudo gem install sass</code></p><h3 id="nodejs安装"><a href="#nodejs安装" class="headerlink" title="nodejs安装"></a>nodejs安装</h3><p>安装参考<a href="https://nodejs.org/en/" target="_blank" rel="external">nodejs.org</a><br>npm访问慢的问题参考<a href="http://npm.taobao.org/" target="_blank" rel="external">npm.taobao.org淘宝镜像</a></p><h3 id="gulp安装"><a href="#gulp安装" class="headerlink" title="gulp安装"></a>gulp安装</h3><blockquote><p>gulp 介绍<br><a href="http://gulpjs.com/" target="_blank" rel="external">gulpjs.com</a><br><a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">gulp中文网</a></p></blockquote><p>gulp 安装参考<a href="http://www.gulpjs.com.cn/docs/getting-started/" target="_blank" rel="external">gulp入门指南</a><br>简易步骤：<br>在项目更目录执行<br><code>npm install --save-dev gulp</code><br><strong>安装gulp-sass插件,详细说明</strong><a href="https://www.npmjs.com/package/gulp-sass/" target="_blank" rel="external">gulp-sass</a><br><code>npm install gulp-sass</code></p><h3 id="sass-转-css-操作流"><a href="#sass-转-css-操作流" class="headerlink" title="sass 转 css 操作流"></a>sass 转 css 操作流</h3><p>示例项目目录结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-node_modules   //node 模块</div><div class="line">-scss           //编译前的scss文件</div><div class="line"> --test.scss</div><div class="line">-css            //编译后的css文件</div><div class="line"> --test.css</div><div class="line">--gulpfile.js   //gulp任务执行工具配置文件</div><div class="line">--index.html</div></pre></td></tr></table></figure></p><p>gulpfile.js文件内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var gulp = require(&apos;gulp&apos;);</div><div class="line">var sass = require(&apos;gulp-sass&apos;);</div><div class="line"></div><div class="line">gulp.task(&apos;scss&apos;,function()&#123;</div><div class="line">gulp.src(&apos;./scss/*.scss&apos;)  //这里是scss文件的目录</div><div class="line">.pipe(sass().on(&apos;error&apos;,sass.logError))</div><div class="line">.pipe(gulp.dest(&apos;./css&apos;));  //这里是编译后css存放的目录</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(&apos;default&apos;,function()&#123;</div><div class="line">gulp.watch(&apos;./scss/*.scss&apos;,[&apos;scss&apos;]);  //在这里执行文件观察任务，发现变化执行上面定义好的 `scss`编译任务。</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>启动：<br><code>node_modules/.bin/gulp gulpfile.js</code><br>提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[19:05:18] Using gulpfile ~/test/gulpfile.js</div><div class="line">[19:05:18] Starting &apos;default&apos;...</div><div class="line">[19:05:18] Finished &apos;default&apos; after 20 ms</div></pre></td></tr></table></figure></p><p>打开编辑器编辑scss下test.scss文件，保存，查看css下test.css文件，已经编译好了。</p><h3 id="css-压缩"><a href="#css-压缩" class="headerlink" title="css 压缩"></a>css 压缩</h3><p>安装 <code>npm i gulp-clean-css --save-dev</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var gulp = require(&apos;gulp&apos;);</div><div class="line">var cleanCss = require(&apos;gulp-clean-css&apos;);</div><div class="line"></div><div class="line">gulp.task(&apos;minify-css&apos;,function()&#123;</div><div class="line">    gulp.src(&apos;./css/*.css&apos;)</div><div class="line">                .pipe(cleanCSS())</div><div class="line">                .pipe(gulp.dest(&apos;./mincss/&apos;));</div><div class="line">    &#125;)</div></pre></td></tr></table></figure></p><p>使用 <code>gulp minify-css</code></p><h3 id="html-压缩"><a href="#html-压缩" class="headerlink" title="html 压缩"></a>html 压缩</h3><p>安装 <code>npm i gulp-htmlmin --save-dev</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var gulp = require(&apos;gulp&apos;);</div><div class="line">var htmlmin = require(&apos;gulp-htmlmin&apos;);</div><div class="line"></div><div class="line">gulp.task(&apos;htmlmin&apos;,function()&#123;</div><div class="line">    gulp.src(&apos;./*.html&apos;)</div><div class="line">        .pipe(htmlmin(&#123;collapseWhitespace:true&#125;))</div><div class="line">        .pipe(gulp.dest(&apos;./minhtml/&apos;));</div><div class="line">    &#125;)</div></pre></td></tr></table></figure></p><p>使用 <code>gulp htmlmin</code></p>]]></content>
    
    <summary type="html">
    
      前端基础工作流：sass自动化编辑成css。sass 完整安装过程，配合nodejs ,gulp 工具，实现自动化编译成css。html压缩，css压缩流
    
    </summary>
    
    
      <category term="tools" scheme="http://vestin.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>bridge pattern 桥接模式</title>
    <link href="http://vestin.github.io/2016/04/28/bridge-pattern/"/>
    <id>http://vestin.github.io/2016/04/28/bridge-pattern/</id>
    <published>2016-04-28T03:03:38.000Z</published>
    <updated>2017-10-19T08:44:29.055Z</updated>
    
    <content type="html"><![CDATA[<h3 id="桥接模式-bridge-pattern"><a href="#桥接模式-bridge-pattern" class="headerlink" title="桥接模式(bridge pattern)"></a>桥接模式(bridge pattern)</h3><p>将<strong>抽象</strong>和<strong>实现</strong>解耦，使得二者可以<strong>独立地变化</strong>。<br>一般用在两个或多个维度（抽象）的变化。</p><a id="more"></a><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xqgk3.com1.z0.glb.clouddn.com/image/design-pattern/bridge-pattern.jpg" alt="bridge" title="">                </div>                <div class="image-caption">bridge</div>            </figure><p>例如：<br>抽象1：Road 具体（高速公路，乡村公路)<br>抽象2：Car  具体（Jeep,BMW)<br>Jeep 可以在告诉公路上跑，也可以在乡村公路上跑，同样BMW也可以。</p><p>实现例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">Abstract Road&#123;</div><div class="line">    /**</div><div class="line">    * 在路上跑</div><div class="line">    /*</div><div class="line">    Abstract function onRoad();</div><div class="line">&#125;</div><div class="line"></div><div class="line">Class SpeedRoad extends Road()&#123;</div><div class="line">    public function onRoad()&#123;</div><div class="line">        echo &apos;在高速公路上&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Class CountryRoad extends Road()&#123;</div><div class="line">    public function onRoad()&#123;</div><div class="line">        echo &apos;在乡村公路上&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Abstract Car&#123;</div><div class="line"></div><div class="line">    public $road;</div><div class="line"></div><div class="line">    //车可以跑</div><div class="line">    Abstract function run();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">Class Jeep extends Car&#123;</div><div class="line">    public function run()&#123;</div><div class="line">        echo &apos;Jepp 跑&apos;;</div><div class="line">        $this-&gt;road-&gt;onRoad();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Class BMW extends Car&#123;</div><div class="line">    public function run()&#123;</div><div class="line">        echo &apos;BMW 跑&apos;;</div><div class="line">        $this-&gt;road-&gt;onRoad();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//test</div><div class="line">$speedRoad = new SpeedRoad;</div><div class="line">$countryRoad = new CountryRoad;</div><div class="line">$Jeep = new Jeep();</div><div class="line">$Jeep-&gt;road = $speedRoad;</div><div class="line">$Jeep-&gt;run(); //Jepp 跑在高速公路上</div><div class="line"></div><div class="line">$jeep-&gt;road = $countryRoad;</div><div class="line">$jeep-&gt;run(); //Jepp 跑在乡村公路上</div><div class="line"></div><div class="line">$Bmw = new BMW;</div><div class="line">$Bmw-&gt;road = $speedRoad;</div><div class="line">$Bmw-&gt;run(); //BMW 跑在高速公路上</div><div class="line"></div><div class="line">$Bmw-&gt;road = $countryRoad;</div><div class="line">$Bmw-&gt;run(); //BMW 跑在乡村公路上</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;桥接模式-bridge-pattern&quot;&gt;&lt;a href=&quot;#桥接模式-bridge-pattern&quot; class=&quot;headerlink&quot; title=&quot;桥接模式(bridge pattern)&quot;&gt;&lt;/a&gt;桥接模式(bridge pattern)&lt;/h3&gt;&lt;p&gt;将&lt;strong&gt;抽象&lt;/strong&gt;和&lt;strong&gt;实现&lt;/strong&gt;解耦，使得二者可以&lt;strong&gt;独立地变化&lt;/strong&gt;。&lt;br&gt;一般用在两个或多个维度（抽象）的变化。&lt;/p&gt;
    
    </summary>
    
      <category term="coding" scheme="http://vestin.github.io/categories/coding/"/>
    
    
      <category term="design pattern" scheme="http://vestin.github.io/tags/design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>google fonts 国内使用解决方案</title>
    <link href="http://vestin.github.io/2016/04/26/google-fonts-use-in-china/"/>
    <id>http://vestin.github.io/2016/04/26/google-fonts-use-in-china/</id>
    <published>2016-04-26T02:47:01.000Z</published>
    <updated>2017-10-19T08:44:29.055Z</updated>
    
    <content type="html"><![CDATA[<p>由于众所周知的原因，国内使用google font库有很大的问题。</p><p>解决方案1：使用国内镜像如<a href="http://libs.useso.com" target="_blank" rel="external">360网站卫士常用前端公共库CDN服务</a></p><ul><li>优点：使用方便</li><li>缺点：目标用户包含国外的开发者，不清楚国外用户的加载速度</li></ul><p>解决方案2：提供另外一种解决方案，可以自主决定资源下载源，自主配置cdn等服务。<br><a id="more"></a></p><ol><li><p>在<a href="https://www.google.com/fonts/" target="_blank" rel="external">google fonts 官网</a>上选择字体并获取css链接，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;link href=&apos;https://fonts.googleapis.com/css?family=Oswald&apos; rel=&apos;stylesheet&apos; type=&apos;text/css&apos;&gt;</div></pre></td></tr></table></figure></li><li><p>将链接内容下载到本地保存，打开，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/* latin */</div><div class="line">@font-face &#123;</div><div class="line">  font-family: &apos;Oswald&apos;;</div><div class="line">  font-style: normal;</div><div class="line">  font-weight: 400;</div><div class="line">  src: local(&apos;Oswald Regular&apos;),</div><div class="line">       local(&apos;Oswald-Regular&apos;),</div><div class="line">       url(https://fonts.gstatic.com/s/oswald/v10/pEobIV_lL25TKBpqVI_a2w.woff2) format(&apos;woff2&apos;);</div><div class="line">  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2212, U+2215, U+E0FF, U+EFFD, U+F000;</div><div class="line">&#125;</div><div class="line">/* 如下可能还有更多代码，但结构是和上面的一样的 */</div></pre></td></tr></table></figure></li><li><p>将 @font-face 下 src属性下 url 处的文件下载到本地并保存，并将 url 地址修改成本地地址</p></li><li>引用修改后的本地google fonts css文件,就可以使用了。</li></ol><p>参考资料：</p><ul><li><a href="https://www.zhihu.com/question/19578734" target="_blank" rel="external">https://www.zhihu.com/question/19578734</a></li><li><a href="https://www.google.com/fonts/" target="_blank" rel="external">https://www.google.com/fonts/</a></li></ul>]]></content>
    
    <summary type="html">
    
      google fonts 离线使用
    
    </summary>
    
      <category term="front-end" scheme="http://vestin.github.io/categories/front-end/"/>
    
    
      <category term="front-end" scheme="http://vestin.github.io/tags/front-end/"/>
    
  </entry>
  
  <entry>
    <title>atom useage</title>
    <link href="http://vestin.github.io/2016/04/19/atom-useage/"/>
    <id>http://vestin.github.io/2016/04/19/atom-useage/</id>
    <published>2016-04-19T05:29:24.000Z</published>
    <updated>2017-10-19T08:44:29.055Z</updated>
    
    <content type="html"><![CDATA[<p>#Install Package</p><p>国内安装非常慢，通常使用手动安装</p><ul><li>手动安装方法一：<ul><li>cd ~/.atom/packages</li><li>git clone <a href="https://github.com/atom/vim-mode.git" target="_blank" rel="external">https://github.com/atom/vim-mode.git</a></li><li>cd vim-mode</li><li>npm install<a id="more"></a></li></ul></li><li>手动安装方法二：<ul><li>apm install atom/vim-mode</li></ul></li></ul><p>#Keybindings</p><p>vim-mode keybindings<br>path: ~/.atom/packages/vim-mode/keymaps/vim-mode.cson</p>]]></content>
    
    <summary type="html">
    
      atom hand book
    
    </summary>
    
      <category term="coding" scheme="http://vestin.github.io/categories/coding/"/>
    
    
      <category term="design pattern" scheme="http://vestin.github.io/tags/design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>RPC-http</title>
    <link href="http://vestin.github.io/2016/04/19/RPC-http/"/>
    <id>http://vestin.github.io/2016/04/19/RPC-http/</id>
    <published>2016-04-19T03:10:42.000Z</published>
    <updated>2017-10-19T08:44:29.055Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="RPC是什么"><a href="#RPC是什么" class="headerlink" title="RPC是什么"></a>RPC是什么</h2><p><a href="https://en.wikipedia.org/wiki/Remote_procedure_call" target="_blank" rel="external">PRC(Remote Procedure Call 远程过程调用)</a> 是<strong>本地计算机程序</strong>通过<strong>网络</strong>调用<strong>远程计算机服务</strong>。</p><a id="more"></a><h2 id="为什么要用RPC"><a href="#为什么要用RPC" class="headerlink" title="为什么要用RPC"></a>为什么要用RPC</h2><ol><li>可以做到分布式，现代化的微服务</li><li>部署灵活</li><li><strong>解耦服务</strong></li><li>扩展性强</li></ol><p>RPC的目的是让你在本地调用远程的方法，而对你来说这个调用是透明的，你并不知道这个调用的方法是部署哪里。通过RPC能解耦服务，这才是使用RPC的真正目的。</p><h2 id="RPC结构"><a href="#RPC结构" class="headerlink" title="RPC结构"></a>RPC结构</h2><p>client-server 结构，调用方为client，远程被调用方为server。</p><h2 id="RPC工作原理"><a href="#RPC工作原理" class="headerlink" title="RPC工作原理"></a>RPC工作原理</h2><p>1.调用客户端句柄；执行传送参数<br>2.调用本地系统内核发送网络消息<br>3.消息传送到远程主机<br>4.服务器句柄得到消息并取得参数<br>5.执行远程过程<br>6.执行的过程将结果返回服务器句柄<br>7.服务器句柄返回结果，调用远程系统内核<br>8.消息传回本地主机<br>9.客户句柄由内核接收消息<br>10.客户接收句柄返回的数据</p><h2 id="RPC框架有哪些"><a href="#RPC框架有哪些" class="headerlink" title="RPC框架有哪些"></a>RPC框架有哪些</h2><p>一般主流框架都实现了跨平台跨语言的C/S RPC调用。</p><ul><li><a href="http://dubbo.io/" target="_blank" rel="external"><code>dubbo</code></a>,主流配合hessian协议使用,duboo/hessian.<blockquote><p>DUBBO是一个分布式服务框架，致力于提供高性能和透明化的RPC远程服务调用方案，是阿里巴巴SOA服务化治理方案的核心框架，每天为2,000+个服务提供3,000,000,000+次访问量支持，并被广泛应用于阿里巴巴集团的各成员站点。</p></blockquote></li><li><a href="https://thrift.apache.org/" target="_blank" rel="external"><code>thrift</code></a>,Apache Thrift software framework<blockquote><p>The Apache Thrift software framework, for scalable cross-language services development, combines a software stack with a code generation engine to build services that work efficiently and seamlessly between C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, JavaScript, Node.js, Smalltalk, OCaml and Delphi and other languages.</p></blockquote></li><li><a href="http://hprose.com/" target="_blank" rel="external"><code>hprose</code></a>,High Performance Remote Object Service Engine<blockquote><p>是一款先进的轻量级、跨语言、跨平台、无侵入式、高性能动态远程对象调用引擎库。它不仅简单易用，而且功能强大。<br>你无需专门学习，只需看上几眼，就能用它轻松构建分布式应用系统。</p></blockquote></li></ul><h2 id="RPC-HTTP"><a href="#RPC-HTTP" class="headerlink" title="RPC-HTTP"></a>RPC-HTTP</h2><p>HTTP 本质来讲是RPC调用的一种实现方式。换种方式说，<strong>RPC客户端</strong>可以通过HTTP连接到<strong>RPC服务端</strong>程序执行<strong>RPC(远程过程调用)</strong>。</p><p>把RPC比作交通工具，那么HTTP就是相当于汽车</p><h4 id="HTTP-调用优点"><a href="#HTTP-调用优点" class="headerlink" title="HTTP 调用优点"></a>HTTP 调用优点</h4><ul><li>协议统一，各个平台几乎都原生支持HTTP</li><li>调用简单,直接</li><li>开发方便</li></ul><blockquote><p>HTTP（HyperText Transfer Protocol）是应用层通信协议, HTTP 的缺点是协议头较重，一般请求到具体服务器的链路较长，可能会有 DNS 解析、Nginx 代理等。</p></blockquote><h4 id="RPC-框架的优点"><a href="#RPC-框架的优点" class="headerlink" title="RPC 框架的优点"></a>RPC 框架的优点</h4><ul><li>RPC框架一般使用长链接，不必每次通信都要3次握手，减少网络开销</li><li>RPC框架一般都有注册中心，有丰富的监控管理</li><li>发布、下线接口、动态扩展等，对调用方来说是无感知、统一化的操作</li><li>协议私密，安全性较高</li><li>rpc 协议更简单内容更小，效率更高</li><li>服务化架构、服务化治理，RPC框架是一个强力的支撑</li></ul><h2 id="RPC-REST"><a href="#RPC-REST" class="headerlink" title="RPC-REST"></a>RPC-REST</h2><p>REST 是定义http接口调用的一种方式，REST 也可以说是RPC调用的实现方式。</p><ul><li><a href="http://www.thinkphp.cn/extend/433.html" target="_blank" rel="external">phprpc解决方案</a></li><li><a href="http://hprose.com/" target="_blank" rel="external">hprose</a></li><li><a href="http://www.phprpc.org/zh_CN/" target="_blank" rel="external">phprpc office website</a></li><li><a href="https://github.com/laruence/yar" target="_blank" rel="external">yar(yet another RPC framework) github</a></li><li><a href="http://www.oschina.net/question/271044_2155059?sort=default&amp;p=1#answers" target="_blank" rel="external">为什么需要RPC，而不是简单的HTTP接口 (oschina)</a></li><li><a href="http://www.tuicool.com/articles/jUj2miJ" target="_blank" rel="external">RPC调用框架比较分析</a></li><li><a href="http://javatar.iteye.com/blog/1123915" target="_blank" rel="external">RPC框架几行代码就够了</a></li><li><a href="http://h2ex.com/820" target="_blank" rel="external">支撑微博千亿调用的轻量级RPC框架：Motan</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;RPC是什么&quot;&gt;&lt;a href=&quot;#RPC是什么&quot; class=&quot;headerlink&quot; title=&quot;RPC是什么&quot;&gt;&lt;/a&gt;RPC是什么&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Remote_procedure_call&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PRC(Remote Procedure Call 远程过程调用)&lt;/a&gt; 是&lt;strong&gt;本地计算机程序&lt;/strong&gt;通过&lt;strong&gt;网络&lt;/strong&gt;调用&lt;strong&gt;远程计算机服务&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="coding" scheme="http://vestin.github.io/categories/coding/"/>
    
    
      <category term="RPC" scheme="http://vestin.github.io/tags/RPC/"/>
    
      <category term="http" scheme="http://vestin.github.io/tags/http/"/>
    
      <category term="php" scheme="http://vestin.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>factory pattern</title>
    <link href="http://vestin.github.io/2016/04/18/design-pattern-factory-pattern/"/>
    <id>http://vestin.github.io/2016/04/18/design-pattern-factory-pattern/</id>
    <published>2016-04-18T09:46:58.000Z</published>
    <updated>2017-10-19T08:44:29.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工厂模式-Factory-Pattern"><a href="#工厂模式-Factory-Pattern" class="headerlink" title="工厂模式(Factory Pattern)"></a>工厂模式(Factory Pattern)</h1><p>[TOC]</p><p>工厂模式是最重要的模式，因为大多数模式都需要用到工厂模式。如果不能正确的运用工厂模式，那么可以说无法成为合格的架构师。<br>多数设计模式的内容讲解的都是如何设计接口。接口如何产生呢？如果在客户代码（类库的使用者称之为客户）中直接使用具体类，那么就失去了接口的意义。因为接口的使用目的，就是要降低客户对具体类的依赖程度。如果在客户代码中直接使用接口，那么就造成了客户对具体类名称的依赖。（客户最终需要以某种方式指明所需要的具体类，如配置文件或代码，但是只需要指出一次，所以说降低对具体类的依赖程度）。要使客户代码不依赖具体类，唯一的方法，就是让客户代码不依赖具体类的部分不知道具体类的名称。知道具体类名称的部分，仅仅是配置部分。（配置文件或者配置代码）。<br>依赖不可能完全消除，除非二者毫无联系。但是可以将这种依赖的程度降到最低。<br>既然不能直接创建具体类，那么就需要通过一个创建者类来创建接口的实现类。这样就产生了工厂类。</p><a id="more"></a><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><blockquote><p><strong>工厂模式</strong> 简单工厂模式是属于创建型模式，又叫做静态工厂方法（Static Factory Method）模式</p></blockquote><p>简单工厂模式的工厂类一般是使用静态方法，通过接收的参数的不同来返回不同的对象实例。</p><p>简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例。简单工厂模式是工厂模式家族中最简单实用的模式，可以理解为是不同工厂模式的一个特殊实现。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xqgk3.com1.z0.glb.clouddn.com/image/design-pattern/static-factory-pattern.jpg" alt="Static Factory Pattern" title="">                </div>                <div class="image-caption">Static Factory Pattern</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xqgk3.com1.z0.glb.clouddn.com/image/design-pattern/SimpleFactory.jpg" alt="simple factory pattern" title="">                </div>                <div class="image-caption">simple factory pattern</div>            </figure><blockquote><p>Static Factory Pattern UMP map</p></blockquote><p>角色分工：</p><ul><li><strong>工厂（Creator）角色</strong><ul><li>简单工厂模式的核心，它负责实现创建所有实例的内部逻辑。工厂类的创建产品类的方法可以被外界直接调用，创建所需的产品对象。</li></ul></li><li>抽象产品（Product）角色<ul><li>简单工厂模式所创建的所有对象的父类，它负责描述所有实例所共有的公共接口。</li></ul></li><li>具体产品（Concrete Product）角色<ul><li>是简单工厂模式的创建目标，所有创建的对象都是充当这个角色的某个具体类的实例。<h4 id="简单工厂模式的优缺点分析："><a href="#简单工厂模式的优缺点分析：" class="headerlink" title="简单工厂模式的优缺点分析："></a>简单工厂模式的优缺点分析：</h4></li></ul></li></ul><p><strong>优点：</strong></p><p><em>有利于系统优化</em></p><p>工厂类是整个模式的关键所在。它包含必要的判断逻辑，能够根据外界给定的信息，决定究竟应该创建哪个具体类的对象。用户在使用时可以直接根据工厂类去创建所需的实例，而无需了解这些对象是如何创建以及如何组织的。有利于整个软件体系结构的优化。</p><p><strong>缺点：</strong></p><p><em>违反了单一职责原则(SRP),开放-封闭原则(OCP)</em></p><p>由于工厂类集中了所有实例的创建逻辑，这就直接导致一旦这个工厂出了问题，所有的客户端都会受到牵连；而且由于简单工厂模式的产品室基于一个共同的抽象类或者接口，这样一来，但产品的种类增加的时候，即有不同的产品接口或者抽象类的时候，工厂类就需要判断何时创建何种种类的产品，这就和创建何种种类产品的产品相互混淆在了一起，违背了单一职责，导致系统丧失灵活性和可维护性。而且更重要的是，简单工厂模式违背了“开放封闭原则”，就是违背了“系统对扩展开放，对修改关闭”的原则，因为当我新增加一个产品的时候必须修改工厂类，相应的工厂类就需要重新编译一遍。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">//抽象产品</div><div class="line">interface Car&#123;</div><div class="line">    abstract public run();</div><div class="line">&#125;</div><div class="line"></div><div class="line">//具体产品</div><div class="line">Class Jeep&#123;</div><div class="line">    public function run()&#123;</div><div class="line">        echo &apos;Jeep&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Class BMW&#123;</div><div class="line">    public function run()&#123;</div><div class="line">        echo &apos;BMW&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//简单工厂</div><div class="line">Class SimpleCarFactory&#123;</div><div class="line">    static public createCar(type)&#123;</div><div class="line">            switch(type)&#123;</div><div class="line">                case 1:</div><div class="line">                    return new Jeep;</div><div class="line">                case 2:</div><div class="line">                    return new BMW;</div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//test</div><div class="line">$car = SimpleCarFactory::createCar(1);</div><div class="line">$car-&gt;run(); //Jeep</div><div class="line"></div><div class="line">$car = SimpleCarFactory::createCar(2);</div><div class="line">$car-&gt;run(); //BMW</div></pre></td></tr></table></figure><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><blockquote><p>工厂方法是针对每一种产品提供一个工厂类。通过不同的工厂实例来创建不同的产品实例。<br>在同一等级(产品)结构中，支持增加任意产品。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xqgk3.com1.z0.glb.clouddn.com/image/design-pattern/FactoryMethod.jpg" alt="factory-pattern-image" title="">                </div>                <div class="image-caption">factory-pattern-image</div>            </figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">//汽车产品</div><div class="line">interface Car&#123;</div><div class="line">    public function run();</div><div class="line">&#125;</div><div class="line"></div><div class="line">//具体产品jeep</div><div class="line">Class Jeep implements Car&#123;</div><div class="line">    public function run()&#123;</div><div class="line">        echo &apos;jeep run...&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//具体产品BMW</div><div class="line">Class BMW implements Car&#123;</div><div class="line">    public function run()&#123;</div><div class="line">        echo &apos;BMW run...&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//工厂抽象</div><div class="line">abstract Class CarFactory&#123;</div><div class="line">    abstract public function createCar();</div><div class="line">&#125;</div><div class="line"></div><div class="line">//Jeep 工厂</div><div class="line">Class JeepCarFactory&#123;</div><div class="line">    public function createCar()&#123;</div><div class="line">        return new Jeep;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//BMW 工厂</div><div class="line">Class BMWCarFactory&#123;</div><div class="line">    public function createCar()&#123;</div><div class="line">        return new BMW;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//Client</div><div class="line">$factory = new JeepCarFactory;</div><div class="line">$car = $factory-&gt;createCar();</div><div class="line">$car-&gt;run();    //jeep run...</div><div class="line"></div><div class="line">$factory = new BMWCarFactory;</div><div class="line">$car = $factory-&gt;createCar();</div><div class="line">$car-&gt;run();    //bmw run...</div></pre></td></tr></table></figure><h2 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h2><blockquote><p>抽象工厂是应对产品族概念的。比如说，每个汽车公司可能要同时生产轿车，货车，客车，那么每一个工厂都要有创建轿车，货车和客车的方法。<br>应对产品族概念而生，增加新的产品线很容易，但是无法增加新的产品。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xqgk3.com1.z0.glb.clouddn.com/image/design-pattern/AbstractFactory.jpg" alt="abstract factory pattern" title="">                </div>                <div class="image-caption">abstract factory pattern</div>            </figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">//抽象车</div><div class="line">interface Car&#123;</div><div class="line">    public function run();</div><div class="line">&#125;</div><div class="line"></div><div class="line">//抽象自行车</div><div class="line">interface Bike&#123;</div><div class="line">    public function run();</div><div class="line">&#125;</div><div class="line"></div><div class="line">//Jeep车</div><div class="line">Class Jeep implements Car&#123;</div><div class="line">    public function run()&#123;</div><div class="line">        echo &apos;Jeep run...&apos;.PHP_EOL;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//Jeep自行车</div><div class="line">Class JeepBike implements Bike&#123;</div><div class="line">    public function run()&#123;</div><div class="line">        echo &apos;JeepBiked run...&apos;.PHP_EOL;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//BMW车</div><div class="line">Class BMW implements Car&#123;</div><div class="line">    public function run()&#123;</div><div class="line">        echo &apos;BMW run..&apos;.PHP_EOL;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//BMW自行车</div><div class="line">Class BMWBike implements Bike&#123;</div><div class="line">    public function run()&#123;</div><div class="line">        echo &apos;BMWBike run..&apos;.PHP_EOL;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//抽象交通工具生产工厂</div><div class="line">interface Vehicle&#123;</div><div class="line">    public function createCar();</div><div class="line">    public function createBike();</div><div class="line">&#125;</div><div class="line"></div><div class="line">//Jeep 工厂</div><div class="line">Class JeepFactory implements Vehicle&#123;</div><div class="line">    public function createCar()&#123;</div><div class="line">        return new Jeep;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public function createBike()&#123;</div><div class="line">        return new JeepBike;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//BMW 工厂</div><div class="line">Class BMWFactory implements Vehicle&#123;</div><div class="line">    public function createCar()&#123;</div><div class="line">        return new BMW;</div><div class="line">    &#125;</div><div class="line">    public function createBike()&#123;</div><div class="line">        return new BMWBike;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//Client</div><div class="line">$factory = new JeepFactory;</div><div class="line">$car = $factory-&gt;createCar();</div><div class="line">$bike = $factory-&gt;createBike();</div><div class="line">$car-&gt;run();</div><div class="line">$bike-&gt;run();</div><div class="line"></div><div class="line">$factory = new BMWFactory;</div><div class="line">$car = $factory-&gt;createCar();</div><div class="line">$bike = $factory-&gt;createBike();</div><div class="line">$car-&gt;run();</div><div class="line">$bike-&gt;run();</div></pre></td></tr></table></figure><h2 id="简单工厂模式、工厂模式、抽象工厂模式的差别"><a href="#简单工厂模式、工厂模式、抽象工厂模式的差别" class="headerlink" title="简单工厂模式、工厂模式、抽象工厂模式的差别"></a>简单工厂模式、工厂模式、抽象工厂模式的差别</h2><blockquote><p>可以参考文章<a href="http://www.cnblogs.com/jy02414216/archive/2012/08/10/2633084.html" target="_blank" rel="external">三种工厂模式的差别</a></p></blockquote><p>简单工厂 ： 用来生产同一等级结构中的任意产品。（对于增加新的产品，无能为力）</p><p>工厂方法 ：用来生产同一等级结构中的固定产品。（支持增加任意产品）<br>抽象工厂 ：用来生产不同产品族的全部产品。（对于增加新的产品，无能为力；支持增加产品族）  </p><p>以上三种工厂 方法在等级结构和产品族这两个方向上的支持程度不同。所以要根据情况考虑应该使用哪种方法。</p><p>简单工厂，一般是两级结构。工厂类创建接口。随着接口创建复杂性的增强，可能在接口创建的过程中，一个创建者类，无法承担创建所有的接口类的职责。可能会有这样的情况，我们定义了一个接口，有6个实现类分别是123456号。但是，这六个实现类不可能用一个工厂创建出来，因为123号是windows下的实现，而456号是linux上的实现。（假设我们使用的语言不是广大人民群众热爱的java语言），那么这个时候，我还需要客户方用相同的方式来创建这个借口，而不是在代码中到处写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Java代码 :</div><div class="line">if (操作系统==&quot;windows&quot;);&#123;   </div><div class="line">...   </div><div class="line">&#125;   </div><div class="line">else&#123;   </div><div class="line">...   </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>那样就太麻烦了。设计模式就是为了减少麻烦，而不是什么别的废话，比如什么太极八卦、天人合一、面向xx之类的。因为怕麻烦，所以搞出设计模式这个咚咚减少麻烦。如果你发现用了设计模式更麻烦了，那么肯定是你用错了。<br>这个时候为了省事，我就把工厂也抽象成一个接口（因为我有两个相似的工厂，如果只有一个，我还废话什么呢），这样就成了工厂方法。<br>当然，既然工厂方法成了一个接口，那么当然也需要用一个工厂来创建它。这个时候，创建是三级结构，简单工厂（此时是工厂的工厂）创建工厂接口（本来是个类，现在因为进一步的抽象，成为接口了），工厂接口创建产品。<br>过了一段时间，随着我们的工厂业务不断发展，我们有了很多产品。比如，我们有锤子和钉子两种产品。这两种产品都有windows品牌和linux品牌的。我们给锤子和钉子各自定义了一个创建的接口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Java代码 :</div><div class="line">interface 锤子工厂&#123;   </div><div class="line">造锤子（）；   </div><div class="line">&#125;   </div><div class="line">interface 钉子工厂&#123;   </div><div class="line">造钉子();;   </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可是，我们发现某些用户，用windows的锤子去敲linux的钉子，从而把程序敲出了bug。这当然是我们的错误，因为我们违反了一条金科玉律：<br>要想使你的程序稳定运行，你假设用户是猪。所以，我们把锤子和钉子的工厂合并，让一个工厂只能造出配套的锤子和钉子，这样猪就没有犯错误的机会了。于是我们搞出一个抽象工厂：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">interface 铁匠铺&#123;</div><div class="line">造锤子（）；</div><div class="line">造钉子();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>当然，这个铁匠铺是个接口，所以同样需要用一个工厂来创建它。所以，这个时候，工厂还是三级结构。<br>我们的工厂，业务很多，而且产品一般都是配套使用的（这样可以多骗点钱），所以，我们大多数情况下，都是使用抽象工厂和简单工厂。简单工厂用来创建工厂，抽象工厂创建产品。<br>工厂的作用，就是创建接口。<br>其实我们不知道什么是设计模式，我们只是怕麻烦。什么是麻烦呢？我们觉得把同样的代码写两遍就非常麻烦。所以，我们宁可多写几句，也要解决麻烦。猪不怕麻烦，可以日复一日的重复相同的事情，可是我们不是猪。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="http://www.cnblogs.com/jy02414216/archive/2012/08/10/2633084.html" target="_blank" rel="external">http://www.cnblogs.com/jy02414216/archive/2012/08/10/2633084.html</a></li><li><a href="http://blog.csdn.net/superbeck/article/details/4446177" target="_blank" rel="external">http://blog.csdn.net/superbeck/article/details/4446177</a></li><li><a href="http://blog.chinaunix.net/uid-25958655-id-4243289.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-25958655-id-4243289.html</a></li><li><a href="http://wxg6203.iteye.com/blog/740229" target="_blank" rel="external">http://wxg6203.iteye.com/blog/740229</a></li></ul>]]></content>
    
    <summary type="html">
    
      detail of factory pattern
    
    </summary>
    
      <category term="coding" scheme="http://vestin.github.io/categories/coding/"/>
    
    
      <category term="design pattern" scheme="http://vestin.github.io/tags/design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>decorator pattern</title>
    <link href="http://vestin.github.io/2016/04/18/design-pattern-decorator-pattern/"/>
    <id>http://vestin.github.io/2016/04/18/design-pattern-decorator-pattern/</id>
    <published>2016-04-18T09:43:59.000Z</published>
    <updated>2017-10-19T08:44:29.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="装饰模式-Decorator-Pattern"><a href="#装饰模式-Decorator-Pattern" class="headerlink" title="装饰模式(Decorator Pattern)"></a>装饰模式(Decorator Pattern)</h1><blockquote><p><strong>装饰模式</strong> 动态的将责任附加到对象上。</p></blockquote><p>装饰模式是在不必改变原类文件和使用继承的情况下，动态的扩展一个对象的功能。它是通过创建一个包装对象，页就是装饰来包裹真实的对象。<br><a id="more"></a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xqgk3.com1.z0.glb.clouddn.com/image/design-pattern/decorator-pattern.png" alt="Decorator Pattern" title="">                </div>                <div class="image-caption">Decorator Pattern</div>            </figure><blockquote><p>Decorator Pattern UMP map <strong><a href="http://www.cnblogs.com/java-my-life/archive/2012/04/20/2455726.html" target="_blank" rel="external">More Detail</a></strong></p></blockquote><ul><li><p>装饰模式优点</p><ul><li>装饰模式与继承关系的目的都是要扩展对象的功能，但是装饰模式可以提供比继承更多的灵活。装饰模式允许系统动态决定“贴上”一个需要的“装饰”，或者除掉一个不需要的“装饰”。继承关系则不同，继承关系是静态的，它在系统运行前就决定了。</li><li>避免在层次结构高层的类有太多的特征</li><li>通过使用不同的具体装饰类以及这些装饰类的排列组合，设计师可以创造出很多不同行为的组合。</li></ul></li><li><p>装饰模式的缺点</p><ul><li>使用装饰模式会产生比使用继承关系更多的对象</li><li>对象很像，排查错误比较困难</li></ul></li></ul><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">abstract class Beverage&#123;</div><div class="line">    public $_name;</div><div class="line">    abstract public function Cost();</div><div class="line">&#125;</div><div class="line">// 被装饰者类</div><div class="line">class Coffee extends Beverage&#123;</div><div class="line">    public function __construct()&#123;</div><div class="line">        $this-&gt;_name = &apos;Coffee&apos;;</div><div class="line">    &#125;</div><div class="line">    public function Cost()&#123;</div><div class="line">        return 1.00;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 以下三个类是装饰者相关类</div><div class="line">class CondimentDecorator extends Beverage&#123;</div><div class="line">    public function __construct()&#123;</div><div class="line">        $this-&gt;_name = &apos;Condiment&apos;;</div><div class="line">    &#125;</div><div class="line">    public function Cost()&#123;</div><div class="line">        return 0.1;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Milk extends CondimentDecorator&#123;</div><div class="line">    public $_beverage;</div><div class="line">    public function __construct($beverage)&#123;</div><div class="line">        $this-&gt;_name = &apos;Milk&apos;;</div><div class="line">        if($beverage instanceof Beverage)&#123;</div><div class="line">            $this-&gt;_beverage = $beverage;</div><div class="line">        &#125;else</div><div class="line">            exit(&apos;Failure&apos;);</div><div class="line">    &#125;</div><div class="line">    public function Cost()&#123;</div><div class="line">        return $this-&gt;_beverage-&gt;Cost() + 0.2;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Sugar extends CondimentDecorator&#123;</div><div class="line">    public $_beverage;</div><div class="line">    public function __construct($beverage)&#123;</div><div class="line">        $this-&gt;_name = &apos;Sugar&apos;;</div><div class="line">        if($beverage instanceof Beverage)&#123;</div><div class="line">            $this-&gt;_beverage = $beverage;</div><div class="line">        &#125;else&#123;</div><div class="line">            exit(&apos;Failure&apos;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    public function Cost()&#123;</div><div class="line">        return $this-&gt;_beverage-&gt;Cost() + 0.2;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Test Case</div><div class="line">//1.拿杯咖啡</div><div class="line">$coffee = new Coffee();</div><div class="line"></div><div class="line">//2.加点牛奶</div><div class="line">$coffee = new Milk($coffee);</div><div class="line"></div><div class="line">//3.加点糖</div><div class="line">$coffee = new Sugar($coffee);</div><div class="line"></div><div class="line">printf(&quot;Coffee Total:%0.2f元\n&quot;,$coffee-&gt;Cost());</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      detial of decorator pattern
    
    </summary>
    
      <category term="coding" scheme="http://vestin.github.io/categories/coding/"/>
    
    
      <category term="design pattern" scheme="http://vestin.github.io/tags/design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>Publish/Subscribe Pattern</title>
    <link href="http://vestin.github.io/2016/04/18/design-pattern-Publish-Subscribe/"/>
    <id>http://vestin.github.io/2016/04/18/design-pattern-Publish-Subscribe/</id>
    <published>2016-04-18T06:46:20.000Z</published>
    <updated>2017-10-19T08:44:29.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><blockquote><p><strong>观察者模式</strong> 定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它所有依赖者都会收到通知并自动更新。<br><a id="more"></a><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xqgk3.com1.z0.glb.clouddn.com/image/design-pattern/subject-observer.jpg" alt="subject observer" title="">                </div>                <div class="image-caption">subject observer</div>            </figure><br>subject observer UMP map</p></blockquote><p>In php</p><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">//被订阅的主题</div><div class="line">interface subject &#123;</div><div class="line"></div><div class="line">    //注册的观察者</div><div class="line">    private $observers = [];</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Observer $observer</div><div class="line">     *</div><div class="line">     * return void</div><div class="line">     */</div><div class="line">    public function rigisterObserver(Observer $observer)&#123;</div><div class="line">        $this-&gt;observers[] = $observer;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Observer $observer</div><div class="line">     *</div><div class="line">     * return void</div><div class="line">     */</div><div class="line">    public function removeObserver(Observer $observer)&#123;</div><div class="line">        unset($this-&gt;observers[array_search($observer)]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Notify all observer</div><div class="line">     *</div><div class="line">     * return void</div><div class="line">     */</div><div class="line">    public function notifyObservers()&#123;</div><div class="line">        foreach($this-&gt;observers as $observer)&#123;</div><div class="line">            $observer-&gt;update();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="观察者"><a href="#观察者" class="headerlink" title="观察者"></a>观察者</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">//观察者</div><div class="line">interface Observer&#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     *  Do things when notify</div><div class="line">     */</div><div class="line">    abstract public function update();</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;观察者模式&quot;&gt;&lt;a href=&quot;#观察者模式&quot; class=&quot;headerlink&quot; title=&quot;观察者模式&quot;&gt;&lt;/a&gt;观察者模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;观察者模式&lt;/strong&gt; 定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它所有依赖者都会收到通知并自动更新。&lt;br&gt;
    
    </summary>
    
      <category term="coding" scheme="http://vestin.github.io/categories/coding/"/>
    
    
      <category term="design pattern" scheme="http://vestin.github.io/tags/design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>design-pattern-principle</title>
    <link href="http://vestin.github.io/2016/04/18/design-pattern-principle/"/>
    <id>http://vestin.github.io/2016/04/18/design-pattern-principle/</id>
    <published>2016-04-18T06:36:28.000Z</published>
    <updated>2017-10-19T08:44:29.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="design-pattern"><a href="#design-pattern" class="headerlink" title="design-pattern"></a>design-pattern</h1><p>##设计原则</p><ul><li>封装变化。</li><li>针对接口编程，而不是针对实现编程。</li><li>多用组合，少用继承。</li><li>为交互对象之间的松耦合设计而努力。</li><li>开放-关闭原则（对扩展开放，对修改关闭）。</li></ul><a id="more"></a><ul><li>依赖倒置原则（要依赖抽象，不要依赖具体类）。<br>指导方针，帮助避免违反依赖倒置原则：<ul><li>变量不可以持有具体类的引用。</li><li>不要让类派生自具体类。</li><li>不要覆盖基类中已实现的方法。</li></ul></li><li>最少知识原则（Least Knowledge,只和朋友交谈)。<br>就任何对象而言，在该对象的方法内，我们只应该调用属于以下范围的方法：<ul><li>该对象本身</li><li>被当作方法的参数而传递进来的对象</li><li>此方法所创建或实例化的任何对象</li><li>对象的任何组件</li></ul></li><li>Hollywood principle：”Don’t call me; I’ll call you.”<ul><li><a href="http://www.tuicool.com/articles/2ma2aa" target="_blank" rel="external">read more</a></li></ul></li><li>单一职责原则（Single responsibility principle）（一个类应该只有一个引起变化的原因）</li></ul><h3 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h3><p>依赖倒置原则（Dependence Inversion Principle）是程序要依赖于抽象接口，不要依赖于具体实现。简单的说就是要求对抽象进行编程，不要对实现进行编程，这样就降低了客户与实现模块间的耦合。</p><ol><li>高层次的模块不应该依赖于低层次的模块，他们都应该依赖于抽象。</li><li>抽象不应该依赖于具体实现，具体实现应该依赖于抽象。</li></ol><h3 id="理性怀疑原则"><a href="#理性怀疑原则" class="headerlink" title="理性怀疑原则"></a>理性怀疑原则</h3><p>模式本身非常有用，但是应该将他们用作一种思考问题的手段，而不是解决问题的处方。注意在使用模式的时候出现以下问题</p><table><thead><tr><th>错误</th><th>原因</th></tr></thead><tbody><tr><td>浮于表面</td><td>仅仅对低层情况有了一些肤浅的理解，就草草选择一个模式</td></tr><tr><td>偏见</td><td>对模式过于偏信。根据已经选定的模式/模型来解释所有数据，不愿意对自己的偏见有任何质疑</td></tr><tr><td>错选</td><td>不理解模式的适用背景和条件（对模式的分类关系理解不全），选择了错误的模式</td></tr><tr><td>削足适履</td><td>忽略了实际的、具体的实例行为中的例外情况，不符合模式中所表达的理论。建模出的对象过于僵硬，不符合实际情况</td></tr></tbody></table><p>模式实现的具体方式应该由问题的本质、约束条件和需求等等决定，而不是根据你在某本模式书中碰巧看到的某个实现。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;design-pattern&quot;&gt;&lt;a href=&quot;#design-pattern&quot; class=&quot;headerlink&quot; title=&quot;design-pattern&quot;&gt;&lt;/a&gt;design-pattern&lt;/h1&gt;&lt;p&gt;##设计原则&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;封装变化。&lt;/li&gt;
&lt;li&gt;针对接口编程，而不是针对实现编程。&lt;/li&gt;
&lt;li&gt;多用组合，少用继承。&lt;/li&gt;
&lt;li&gt;为交互对象之间的松耦合设计而努力。&lt;/li&gt;
&lt;li&gt;开放-关闭原则（对扩展开放，对修改关闭）。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="coding" scheme="http://vestin.github.io/categories/coding/"/>
    
    
      <category term="design pattern" scheme="http://vestin.github.io/tags/design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>markdown language</title>
    <link href="http://vestin.github.io/2016/04/18/markdown-language/"/>
    <id>http://vestin.github.io/2016/04/18/markdown-language/</id>
    <published>2016-04-18T05:44:59.000Z</published>
    <updated>2017-10-19T08:44:29.055Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录 (Table of Contents)</strong></p><p>[TOC]</p><a id="more"></a><h1 id="Heading-1"><a href="#Heading-1" class="headerlink" title="Heading 1"></a>Heading 1</h1><h2 id="Heading-2"><a href="#Heading-2" class="headerlink" title="Heading 2"></a>Heading 2</h2><h3 id="Heading-3"><a href="#Heading-3" class="headerlink" title="Heading 3"></a>Heading 3</h3><h4 id="Heading-4"><a href="#Heading-4" class="headerlink" title="Heading 4"></a>Heading 4</h4><h5 id="Heading-5"><a href="#Heading-5" class="headerlink" title="Heading 5"></a>Heading 5</h5><h6 id="Heading-6"><a href="#Heading-6" class="headerlink" title="Heading 6"></a>Heading 6</h6><h1 id="Heading-1-link-Heading-link"><a href="#Heading-1-link-Heading-link" class="headerlink" title="Heading 1 link Heading link"></a>Heading 1 link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="external">Heading link</a></h1><h2 id="Heading-2-link-Heading-link"><a href="#Heading-2-link-Heading-link" class="headerlink" title="Heading 2 link Heading link"></a>Heading 2 link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="external">Heading link</a></h2><h3 id="Heading-3-link-Heading-link"><a href="#Heading-3-link-Heading-link" class="headerlink" title="Heading 3 link Heading link"></a>Heading 3 link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="external">Heading link</a></h3><h4 id="Heading-4-link-Heading-link-Heading-link-Heading-link"><a href="#Heading-4-link-Heading-link-Heading-link-Heading-link" class="headerlink" title="Heading 4 link Heading link Heading link Heading link"></a>Heading 4 link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="external">Heading link</a> Heading link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="external">Heading link</a></h4><h5 id="Heading-5-link-Heading-link"><a href="#Heading-5-link-Heading-link" class="headerlink" title="Heading 5 link Heading link"></a>Heading 5 link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="external">Heading link</a></h5><h6 id="Heading-6-link-Heading-link"><a href="#Heading-6-link-Heading-link" class="headerlink" title="Heading 6 link Heading link"></a>Heading 6 link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="external">Heading link</a></h6><h4 id="标题（用底线的形式）Heading-underline"><a href="#标题（用底线的形式）Heading-underline" class="headerlink" title="标题（用底线的形式）Heading (underline)"></a>标题（用底线的形式）Heading (underline)</h4><h1 id="This-is-an-H1"><a href="#This-is-an-H1" class="headerlink" title="This is an H1"></a>This is an H1</h1><h2 id="This-is-an-H2"><a href="#This-is-an-H2" class="headerlink" title="This is an H2"></a>This is an H2</h2><h3 id="字符效果和横线等"><a href="#字符效果和横线等" class="headerlink" title="字符效果和横线等"></a>字符效果和横线等</h3><hr><p><del>删除线</del> <s>删除线（开启识别HTML标签时）</s><br><em>斜体字</em>      <em>斜体字</em><br><strong>粗体</strong>  <strong>粗体</strong><br><strong><em>粗斜体</em></strong> <strong><em>粗斜体</em></strong></p><p>上标：X<sub>2</sub>，下标：O<sup>2</sup></p><p><strong>缩写(同HTML的abbr标签)</strong></p><blockquote><p>即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启</p></blockquote><p>The <abbr title="Hyper Text Markup Language">HTML</abbr> specification is maintained by the <abbr title="World Wide Web Consortium">W3C</abbr>.</p><h3 id="引用-Blockquotes"><a href="#引用-Blockquotes" class="headerlink" title="引用 Blockquotes"></a>引用 Blockquotes</h3><blockquote><p>引用文本 Blockquotes</p></blockquote><p>引用的行内混合 Blockquotes</p><blockquote><p>引用：如果想要插入空白换行<code>即&lt;br /&gt;标签</code>，在插入处先键入两个以上的空格然后回车即可，<a href="http://localhost/" target="_blank" rel="external">普通链接</a>。</p></blockquote><h3 id="锚点与链接-Links"><a href="#锚点与链接-Links" class="headerlink" title="锚点与链接 Links"></a>锚点与链接 Links</h3><p><a href="http://localhost/" target="_blank" rel="external">普通链接</a></p><p><a href="http://localhost/" title="普通链接带标题" target="_blank" rel="external">普通链接带标题</a></p><p>直接链接：<a href="https://github.com" target="_blank" rel="external">https://github.com</a></p><p><a href="http://www.this-anchor-link.com/" target="_blank" rel="external">锚点链接</a></p><p><a href="mailto:test.test@gmail.com" target="_blank" rel="external">mailto:test.test@gmail.com</a></p><p>GFM a-tail link @pandao  邮箱地址自动链接 test.test@gmail.com  www@vip.qq.com</p><blockquote><p>@pandao</p></blockquote><h3 id="多语言代码高亮-Codes"><a href="#多语言代码高亮-Codes" class="headerlink" title="多语言代码高亮 Codes"></a>多语言代码高亮 Codes</h3><h4 id="行内代码-Inline-code"><a href="#行内代码-Inline-code" class="headerlink" title="行内代码 Inline code"></a>行内代码 Inline code</h4><p>执行命令：<code>npm install marked</code></p><h4 id="缩进风格"><a href="#缩进风格" class="headerlink" title="缩进风格"></a>缩进风格</h4><p>即缩进四个空格，也做为实现类似 <code>&lt;pre&gt;</code> 预格式化文本 ( Preformatted Text ) 的功能。</p><pre><code>&lt;?php    echo &quot;Hello world!&quot;;?&gt;</code></pre><p>预格式化文本：</p><pre><code>| First Header  | Second Header || ------------- | ------------- || Content Cell  | Content Cell  || Content Cell  | Content Cell  |</code></pre><h4 id="JS代码"><a href="#JS代码" class="headerlink" title="JS代码　"></a>JS代码　</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"Hello world!"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> box = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> box.fn.init();</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    box.prototype = box.fn = &#123;</div><div class="line">        init : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'box.init()'</span>);</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">add : <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">alert(<span class="string">"add"</span>, str);</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;,</div><div class="line"></div><div class="line">remove : <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">alert(<span class="string">"remove"</span>, str);</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    box.fn.init.prototype = box.fn;</div><div class="line"></div><div class="line">    <span class="built_in">window</span>.box =box;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="keyword">var</span> testBox = box();</div><div class="line">testBox.add(<span class="string">"jQuery"</span>).remove(<span class="string">"jQuery"</span>);</div></pre></td></tr></table></figure><h4 id="HTML-代码-HTML-codes"><a href="#HTML-代码-HTML-codes" class="headerlink" title="HTML 代码 HTML codes"></a>HTML 代码 HTML codes</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mate</span> <span class="attr">charest</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"Editor.md, Markdown, Editor"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">            body&#123;font-size:14px;color:#444;font-family: "Microsoft Yahei", Tahoma, "Hiragino Sans GB", Arial;background:#fff;&#125;</span></div><div class="line"><span class="undefined">            ul&#123;list-style: none;&#125;</span></div><div class="line"><span class="undefined">            img&#123;border:none;vertical-align: middle;&#125;</span></div><div class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"text-xxl"</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-green"</span>&gt;</span>Plain text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="图片-Images"><a href="#图片-Images" class="headerlink" title="图片 Images"></a>图片 Images</h3><p>Image:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pandao.github.io/editor.md/examples/images/4.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p>Follow your heart.</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pandao.github.io/editor.md/examples/images/8.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p>图为：厦门白城沙滩</p></blockquote><p>图片加链接 (Image + Link)：</p><p>[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pandao.github.io/editor.md/images/7.jpg" alt="](https://pandao.github.io/editor.md/examples/images/7.jpg)" title="李健首张专辑《似水流年》封面">                </div>                <div class="image-caption">李健首张专辑《似水流年》封面</div>            </figure></p><blockquote><p>图为：李健首张专辑《似水流年》封面</p></blockquote><hr><h3 id="列表-Lists"><a href="#列表-Lists" class="headerlink" title="列表 Lists"></a>列表 Lists</h3><h4 id="无序列表（减号）Unordered-Lists"><a href="#无序列表（减号）Unordered-Lists" class="headerlink" title="无序列表（减号）Unordered Lists (-)"></a>无序列表（减号）Unordered Lists (-)</h4><ul><li>列表一</li><li>列表二</li><li>列表三</li></ul><h4 id="无序列表（星号）Unordered-Lists"><a href="#无序列表（星号）Unordered-Lists" class="headerlink" title="无序列表（星号）Unordered Lists (*)"></a>无序列表（星号）Unordered Lists (*)</h4><ul><li>列表一</li><li>列表二</li><li>列表三</li></ul><h4 id="无序列表（加号和嵌套）Unordered-Lists"><a href="#无序列表（加号和嵌套）Unordered-Lists" class="headerlink" title="无序列表（加号和嵌套）Unordered Lists (+)"></a>无序列表（加号和嵌套）Unordered Lists (+)</h4><ul><li>列表一</li><li>列表二<ul><li>列表二-1</li><li>列表二-2</li><li>列表二-3</li></ul></li><li>列表三<ul><li>列表一</li><li>列表二</li><li>列表三</li></ul></li></ul><h4 id="有序列表-Ordered-Lists"><a href="#有序列表-Ordered-Lists" class="headerlink" title="有序列表 Ordered Lists (-)"></a>有序列表 Ordered Lists (-)</h4><ol><li>第一行</li><li>第二行</li><li>第三行</li></ol><h4 id="GFM-task-list"><a href="#GFM-task-list" class="headerlink" title="GFM task list"></a>GFM task list</h4><ul><li style="list-style: none"><input type="checkbox" checked> GFM task list 1</li><li style="list-style: none"><input type="checkbox" checked> GFM task list 2</li><li style="list-style: none"><input type="checkbox"> GFM task list 3<ul><li style="list-style: none"><input type="checkbox"> GFM task list 3-1</li><li style="list-style: none"><input type="checkbox"> GFM task list 3-2</li><li style="list-style: none"><input type="checkbox"> GFM task list 3-3</li></ul></li><li style="list-style: none"><input type="checkbox"> GFM task list 4<ul><li style="list-style: none"><input type="checkbox"> GFM task list 4-1</li><li style="list-style: none"><input type="checkbox"> GFM task list 4-2</li></ul></li></ul><hr><h3 id="绘制表格-Tables"><a href="#绘制表格-Tables" class="headerlink" title="绘制表格 Tables"></a>绘制表格 Tables</h3><table><thead><tr><th>项目</th><th style="text-align:right">价格</th><th style="text-align:center">数量</th></tr></thead><tbody><tr><td>计算机</td><td style="text-align:right">$1600</td><td style="text-align:center">5</td></tr><tr><td>手机</td><td style="text-align:right">$12</td><td style="text-align:center">12</td></tr><tr><td>管线</td><td style="text-align:right">$1</td><td style="text-align:center">234</td></tr></tbody></table><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td></tr></tbody></table><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td></tr></tbody></table><table><thead><tr><th>Function name</th><th>Description</th></tr></thead><tbody><tr><td><code>help()</code></td><td>Display the help window.</td></tr><tr><td><code>destroy()</code></td><td><strong>Destroy your computer!</strong></td></tr></tbody></table><table><thead><tr><th style="text-align:left">Left-Aligned</th><th style="text-align:center">Center Aligned</th><th style="text-align:right">Right Aligned</th></tr></thead><tbody><tr><td style="text-align:left">col 3 is</td><td style="text-align:center">some wordy text</td><td style="text-align:right">$1600</td></tr><tr><td style="text-align:left">col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$12</td></tr><tr><td style="text-align:left">zebra stripes</td><td style="text-align:center">are neat</td><td style="text-align:right">$1</td></tr></tbody></table><table><thead><tr><th>Item</th><th style="text-align:right">Value</th></tr></thead><tbody><tr><td>Computer</td><td style="text-align:right">$1600</td></tr><tr><td>Phone</td><td style="text-align:right">$12</td></tr><tr><td>Pipe</td><td style="text-align:right">$1</td></tr></tbody></table><hr><h4 id="特殊符号-HTML-Entities-Codes"><a href="#特殊符号-HTML-Entities-Codes" class="headerlink" title="特殊符号 HTML Entities Codes"></a>特殊符号 HTML Entities Codes</h4><p>© &amp;  ¨ ™ ¡ £<br>&amp; &lt; &gt; ¥ € ® ± ¶ § ¦ ¯ « ·</p><p>X² Y³ ¾ ¼  ×  ÷   »</p><p>18ºC  “  &apos;</p><p>[========]</p><h3 id="Emoji表情-smiley"><a href="#Emoji表情-smiley" class="headerlink" title="Emoji表情 :smiley:"></a>Emoji表情 :smiley:</h3><blockquote><p>Blockquotes :star:</p></blockquote><h4 id="GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x"><a href="#GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x" class="headerlink" title="GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:"></a>GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:</h4><ul><li style="list-style: none"><input type="checkbox" checked> :smiley: @mentions, :smiley: #refs, <a href="">links</a>, <strong>formatting</strong>, and <del>tags</del> supported :editormd-logo:;</li><li style="list-style: none"><input type="checkbox" checked> list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;</li><li style="list-style: none"><input type="checkbox" checked> [ ] :smiley: this is a complete item :smiley:;</li><li style="list-style: none"><input type="checkbox"> []this is an incomplete item <a href="#">test link</a> :fa-star: @pandao;</li><li style="list-style: none"><input type="checkbox"> [ ]this is an incomplete item :fa-star: :fa-gear:;<ul><li style="list-style: none"><input type="checkbox"> :smiley: this is an incomplete item <a href="#">test link</a> :fa-star: :fa-gear:;</li><li style="list-style: none"><input type="checkbox"> :smiley: this is  :fa-star: :fa-gear: an incomplete item <a href="#">test link</a>;</li></ul></li></ul><h4 id="反斜杠-Escape"><a href="#反斜杠-Escape" class="headerlink" title="反斜杠 Escape"></a>反斜杠 Escape</h4><p>*literal asterisks*</p><p>[========]</p><h3 id="科学公式-TeX-KaTeX"><a href="#科学公式-TeX-KaTeX" class="headerlink" title="科学公式 TeX(KaTeX)"></a>科学公式 TeX(KaTeX)</h3><p>$$E=mc^2$$</p><p>行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。</p><p>$$x &gt; y$$</p><p>$$(\sqrt{3x-1}+(1+x)^2)$$</p><p>$$\sin(\alpha)^{\theta}=\sum_{i=0}^{n}(x^i + \cos(f))$$</p><p>多行公式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">\displaystyle</div><div class="line">\left( \sum\_&#123;k=1&#125;^n a\_k b\_k \right)^2</div><div class="line">\leq</div><div class="line">\left( \sum\_&#123;k=1&#125;^n a\_k^2 \right)</div><div class="line">\left( \sum\_&#123;k=1&#125;^n b\_k^2 \right)</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">\displaystyle</div><div class="line">    \frac&#123;1&#125;&#123;</div><div class="line">        \Bigl(\sqrt&#123;\phi \sqrt&#123;5&#125;&#125;-\phi\Bigr) e^&#123;</div><div class="line">        \frac25 \pi&#125;&#125; = 1+\frac&#123;e^&#123;-2\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-4\pi&#125;&#125; &#123;</div><div class="line">        1+\frac&#123;e^&#123;-6\pi&#125;&#125;</div><div class="line">        &#123;1+\frac&#123;e^&#123;-8\pi&#125;&#125;</div><div class="line">         &#123;1+\cdots&#125; &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">f(x) = \int_&#123;-\infty&#125;^\infty</div><div class="line">    \hat f(\xi)\,e^&#123;2 \pi i \xi x&#125;</div><div class="line">    \,d\xi</div></pre></td></tr></table></figure><h3 id="分页符-Page-break"><a href="#分页符-Page-break" class="headerlink" title="分页符 Page break"></a>分页符 Page break</h3><blockquote><p>Print Test: Ctrl + P</p></blockquote><p>[========]</p><h3 id="绘制流程图-Flowchart"><a href="#绘制流程图-Flowchart" class="headerlink" title="绘制流程图 Flowchart"></a>绘制流程图 Flowchart</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">st=&gt;start: 用户登陆</div><div class="line">op=&gt;operation: 登陆操作</div><div class="line">cond=&gt;condition: 登陆成功 Yes or No?</div><div class="line">e=&gt;end: 进入后台</div><div class="line"></div><div class="line">st-&gt;op-&gt;cond</div><div class="line">cond(yes)-&gt;e</div><div class="line">cond(no)-&gt;op</div></pre></td></tr></table></figure><p>[========]</p><h3 id="绘制序列图-Sequence-Diagram"><a href="#绘制序列图-Sequence-Diagram" class="headerlink" title="绘制序列图 Sequence Diagram"></a>绘制序列图 Sequence Diagram</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Andrew-&gt;China: Says Hello</div><div class="line">Note right of China: China thinks\nabout it</div><div class="line">China--&gt;Andrew: How are you?</div><div class="line">Andrew-&gt;&gt;China: I am good thanks!</div></pre></td></tr></table></figure><h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;目录 (Table of Contents)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="http://vestin.github.io/categories/tools/"/>
    
    
      <category term="work tools" scheme="http://vestin.github.io/tags/work-tools/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu 系统安装后必做</title>
    <link href="http://vestin.github.io/2016/04/18/ubuntu-install/"/>
    <id>http://vestin.github.io/2016/04/18/ubuntu-install/</id>
    <published>2016-04-18T05:30:36.000Z</published>
    <updated>2017-10-19T08:44:29.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ubuntu-安装"><a href="#ubuntu-安装" class="headerlink" title="ubuntu 安装"></a>ubuntu 安装</h1><p>2015-10-14 14:46:28 星期三 @vestin</p><h3 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h3><ol><li>下载 image writer 镜像写入工具</li><li>下载 ubuntu 最新系统 <a href="http://cn.ubuntu.com/download" title="ubuntu 下载" target="_blank" rel="external">ubuntu 下载</a></li><li>写入镜像 安装</li></ol><a id="more"></a><h3 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h3><ul><li>root 用户添加<ul><li>sudo passwd root</li><li>su</li></ul></li><li>外观<ul><li>主题：Radiance</li><li>行为：开启工作区</li></ul></li><li>软件和更新<ul><li>附加驱动：使用附加驱动</li><li>更新：每周</li></ul></li><li>时间和日期<ul><li>时钟：星期，日期，年份，月历</li></ul></li><li>用户账户<ul><li>在菜单栏显示登录名</li></ul></li><li><p>拒绝GUEST帐号登录</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo sh -c &apos;printf &quot;[SeatDefaults]\nallow-guest=false\n&quot; &gt;/usr/share/lightdm/lightdm.conf.d/50-no-guest.conf&apos;</div></pre></td></tr></table></figure></li></ul></li><li><p>链接到windows的<code>WORKGROUP</code></p><ul><li>gedit /etc/samba/smb.conf<br>  workgroup = WORKGROUP<br>  netbios name = something</li><li>文件管理器<code>CRTL+L</code> 输入 <code>smb://xxx.xxx.xxx.xxx/</code> 链接</li></ul></li></ul><h3 id="工具安装"><a href="#工具安装" class="headerlink" title="工具安装"></a>工具安装</h3><ul><li>su</li><li>filezilla<ul><li>apt-get install filezilla</li></ul></li><li>vim<ul><li>apt-get install vim</li></ul></li><li>天涯vpn配置<ul><li>网络链接-&gt;vpn-&gt;配置vpn<br>网关:<code>us5.tyvpn.cn</code><br>高级:身份验证(MSCHAP,MSCHAP2) 安全(MMPE)</li></ul></li><li>chorme 登录</li><li><p><a href="https://github.com/librehat/shadowsocks-qt5" title="shadowsocks-qt5" target="_blank" rel="external">shadowsocks-qt5</a></p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:hzwhuang/ss-qt5</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install shadowsocks-qt5</div></pre></td></tr></table></figure></li><li><p>qt5 配置</p><ul><li>配置<br>服务器IP:<br>运营部可使用以下两个(建议使用不同的)<br>173.254.200.25<br>173.254.200.26<br>技术部可以使用以下三个<br>173.254.200.34<br>173.254.200.25<br>173.254.200.18<br>密码:Ya<strong><em>*</em></strong><br>加密:aes-256-cfb(默认，无需改动)<br>备注:无关紧要，自己填写<br>代理端口:1080(默认，无需改动)</li></ul></li></ul></li><li><p>邮件客户端thunderbird 配置</p><ul><li>网易企业客户端配置<br>接受 imap.ym.163.com 993 ssl/tls 普通密码<br>发送 smtp.ym.163.com 465 ssl/tls   普通密码</li></ul></li><li><p>phpstorm 安装</p><ul><li>apt-get install default-jre</li><li>下载<a href="http://download-cf.jetbrains.com/webide/PhpStorm-9.0.tar.gz" target="_blank" rel="external">phpstorm9.0</a> 到 /myfile</li><li>解压，移动到 /usr/share ,创建软链接到/usr/bin 中</li><li>启动，锁定到任务栏</li><li>User Name: newasp<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">===== LICENSE BEGIN =====</div><div class="line">14617-12042010</div><div class="line">00001xrVkhnPuM!Bd!vYtgydcusnqt</div><div class="line">mM!hZWoGg&quot;DprWxZCBwsy8T91O7MRu</div><div class="line">NVHtrbzv8O9mmoLvtijcHSSE7i5Jr!</div><div class="line">===== LICENSE END =====</div></pre></td></tr></table></figure></li></ul></li><li><p>sublime 安装配置</p><ul><li><a href="http://www.sublimetext.com/3" target="_blank" rel="external">sublime3</a></li><li>dpkg -i .deb</li><li>配置</li></ul></li><li><p>unity tool 工具设置</p><ul><li>sudo  apt-get  install  unity-tweak-tool</li><li>dash 中打开unity-tweak-tool</li></ul></li><li>conky 系统监视<ul><li>sudo apt-get install conky</li></ul></li></ul><h3 id="工作环境安装"><a href="#工作环境安装" class="headerlink" title="工作环境安装"></a>工作环境安装</h3><ul><li>apt-get install php5</li><li>apt-get install mysql-server</li><li>apt-get install mysql-client</li><li>apt-get install php5-mysql</li><li>apt-get install php5-xdebug</li><li>apache2 配置</li><li>php5 配置</li><li>安装 git</li></ul><p>5 axel、aria 多线程下载。<br>axel -n 10 下载url， 开10线程下载文件<br>百度云的东西可以用axel下载，我经常在服务器用axel下载百度云的东西。</p><p><strong><a href="http://www.unixmen.com/top-things-to-do-after-installing-ubuntu-15-04/" target="_blank" rel="external">Top Things To Do After Installing Ubuntu 15.04</a></strong></p>]]></content>
    
    <summary type="html">
    
      ubuntu 系统安装后必做
    
    </summary>
    
      <category term="linux" scheme="http://vestin.github.io/categories/linux/"/>
    
    
      <category term="ubuntu" scheme="http://vestin.github.io/tags/ubuntu/"/>
    
  </entry>
  
</feed>
